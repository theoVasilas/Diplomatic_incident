[2025-02-10 15:47:51,747][flwr][INFO] - Starting Flower ServerApp, config: num_rounds=20, no round_timeout
[2025-02-10 15:47:51,747][flwr][INFO] - 
[2025-02-10 15:47:51,749][flwr][INFO] - [INIT]
[2025-02-10 15:47:51,749][flwr][INFO] - Using initial global parameters provided by strategy
[2025-02-10 15:47:51,750][flwr][INFO] - Starting evaluation of initial global parameters
[2025-02-10 15:47:57,889][flwr][INFO] - initial parameters (loss, other metrics): 0.07204539165496826, {'accuracy': 0.1096}
[2025-02-10 15:47:57,890][flwr][INFO] - 
[2025-02-10 15:47:57,890][flwr][INFO] - [ROUND 1]
[2025-02-10 15:47:57,890][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:03,670][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:03,666][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:03,676][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:03,676][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:03,736][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:03,736][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:08,787][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:48:13,041][flwr][INFO] - fit progress: (1, 0.07140904502868653, {'accuracy': 0.2405}, 15.151755650993437)
[2025-02-10 15:48:13,043][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:13,114][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:13,114][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:13,115][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:13,117][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:13,117][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:13,118][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:16,253][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:48:16,254][flwr][INFO] - 
[2025-02-10 15:48:16,254][flwr][INFO] - [ROUND 2]
[2025-02-10 15:48:16,255][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:16,299][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:16,299][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:16,300][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:16,301][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:16,302][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:16,303][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:18,863][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:48:22,693][flwr][INFO] - fit progress: (2, 0.07013665909767151, {'accuracy': 0.2935}, 24.803469783990295)
[2025-02-10 15:48:22,693][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:22,712][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:22,713][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:22,714][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:22,800][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:22,801][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:22,801][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:25,301][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:48:25,301][flwr][INFO] - 
[2025-02-10 15:48:25,301][flwr][INFO] - [ROUND 3]
[2025-02-10 15:48:25,301][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:25,412][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:25,413][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:25,413][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:25,414][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:25,414][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:25,415][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:27,908][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:48:32,027][flwr][INFO] - fit progress: (3, 0.06684601922035217, {'accuracy': 0.3797}, 34.137458427998354)
[2025-02-10 15:48:32,027][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:32,127][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:32,128][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:32,128][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:32,130][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:32,131][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:32,131][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:35,537][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:48:35,537][flwr][INFO] - 
[2025-02-10 15:48:35,537][flwr][INFO] - [ROUND 4]
[2025-02-10 15:48:35,537][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:35,636][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:35,636][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:35,637][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:35,638][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:35,638][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:35,639][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:38,146][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:48:42,029][flwr][INFO] - fit progress: (4, 0.060550751078128816, {'accuracy': 0.4249}, 44.13946920799208)
[2025-02-10 15:48:42,029][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:42,136][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:42,136][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:42,137][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:42,137][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:42,137][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:42,138][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:45,036][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:48:45,037][flwr][INFO] - 
[2025-02-10 15:48:45,037][flwr][INFO] - [ROUND 5]
[2025-02-10 15:48:45,037][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:45,148][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:45,149][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:45,149][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:45,150][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:45,150][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:45,151][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:47,549][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:48:52,309][flwr][INFO] - fit progress: (5, 0.05163719133138656, {'accuracy': 0.4755}, 54.41976995099685)
[2025-02-10 15:48:52,310][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:52,365][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:52,366][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:52,366][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:52,367][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:52,368][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:52,368][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:55,216][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:48:55,217][flwr][INFO] - 
[2025-02-10 15:48:55,217][flwr][INFO] - [ROUND 6]
[2025-02-10 15:48:55,217][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:48:55,271][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:55,272][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:48:55,273][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:48:55,271][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:48:55,273][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:48:55,274][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:48:57,825][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:02,182][flwr][INFO] - fit progress: (6, 0.044057470160722735, {'accuracy': 0.5184}, 64.29286175400193)
[2025-02-10 15:49:02,183][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:02,284][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:02,284][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:02,285][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:02,285][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:02,286][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:02,287][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:05,290][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:05,290][flwr][INFO] - 
[2025-02-10 15:49:05,290][flwr][INFO] - [ROUND 7]
[2025-02-10 15:49:05,290][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:05,389][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:05,390][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:05,392][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:05,392][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:05,393][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:05,394][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:07,997][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:11,914][flwr][INFO] - fit progress: (7, 0.04037206601500511, {'accuracy': 0.5508}, 74.02417117600271)
[2025-02-10 15:49:11,914][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:12,002][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:12,002][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:12,002][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:12,003][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:12,003][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:12,004][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:14,722][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:14,722][flwr][INFO] - 
[2025-02-10 15:49:14,723][flwr][INFO] - [ROUND 8]
[2025-02-10 15:49:14,723][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:14,807][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:14,808][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:14,809][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:14,809][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:14,810][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:14,810][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:17,933][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:21,616][flwr][INFO] - fit progress: (8, 0.04021452856063843, {'accuracy': 0.5821}, 83.7261734509957)
[2025-02-10 15:49:21,616][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:21,722][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:21,723][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:21,723][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:21,724][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:21,724][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:21,725][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:24,523][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:24,524][flwr][INFO] - 
[2025-02-10 15:49:24,524][flwr][INFO] - [ROUND 9]
[2025-02-10 15:49:24,524][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:24,629][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:24,629][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:24,630][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:24,631][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:24,632][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:24,632][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:27,434][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:31,281][flwr][INFO] - fit progress: (9, 0.04352908374071121, {'accuracy': 0.6012}, 93.39112722399295)
[2025-02-10 15:49:31,281][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:31,341][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:31,341][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:31,341][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:31,342][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:31,343][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:31,343][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:34,188][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:34,188][flwr][INFO] - 
[2025-02-10 15:49:34,188][flwr][INFO] - [ROUND 10]
[2025-02-10 15:49:34,188][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:34,246][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:34,247][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:34,248][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:34,248][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:34,249][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:34,249][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:36,997][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:40,732][flwr][INFO] - fit progress: (10, 0.049734366273880004, {'accuracy': 0.6165}, 102.84285604799516)
[2025-02-10 15:49:40,733][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:40,760][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:40,762][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:40,762][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:40,761][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:40,763][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:40,764][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:43,638][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:43,639][flwr][INFO] - 
[2025-02-10 15:49:43,639][flwr][INFO] - [ROUND 11]
[2025-02-10 15:49:43,639][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:43,666][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:43,666][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:43,666][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:43,668][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:43,667][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:43,669][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:46,248][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:49:50,539][flwr][INFO] - fit progress: (11, 0.06092203503847122, {'accuracy': 0.6202}, 112.64935126800265)
[2025-02-10 15:49:50,539][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:50,577][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:50,577][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:50,577][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:50,578][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:50,579][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:50,580][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:53,746][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:49:53,746][flwr][INFO] - 
[2025-02-10 15:49:53,746][flwr][INFO] - [ROUND 12]
[2025-02-10 15:49:53,746][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:49:53,783][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:53,783][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:49:53,784][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:49:53,785][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:49:53,786][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:49:53,786][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:49:56,255][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:00,083][flwr][INFO] - fit progress: (12, 0.0775224134027958, {'accuracy': 0.6164}, 122.19305240298854)
[2025-02-10 15:50:00,083][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:00,195][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:00,195][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:00,195][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:00,196][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:00,196][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:00,197][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:02,895][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:02,895][flwr][INFO] - 
[2025-02-10 15:50:02,895][flwr][INFO] - [ROUND 13]
[2025-02-10 15:50:02,896][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:03,002][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:03,002][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:03,003][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:03,003][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:03,004][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:03,004][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:06,003][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:10,764][flwr][INFO] - fit progress: (13, 0.10108983575105668, {'accuracy': 0.605}, 132.87452287199267)
[2025-02-10 15:50:10,764][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:10,814][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:10,814][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:10,815][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:10,816][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:10,816][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:10,817][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:13,371][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:13,371][flwr][INFO] - 
[2025-02-10 15:50:13,371][flwr][INFO] - [ROUND 14]
[2025-02-10 15:50:13,371][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:13,419][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:13,419][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:13,420][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:13,420][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:13,421][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:13,422][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:15,978][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:19,662][flwr][INFO] - fit progress: (14, 0.13253731207847594, {'accuracy': 0.5916}, 141.77212642200175)
[2025-02-10 15:50:19,662][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:19,729][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:19,731][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:19,731][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:19,732][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:19,733][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:19,733][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:22,368][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:22,368][flwr][INFO] - 
[2025-02-10 15:50:22,368][flwr][INFO] - [ROUND 15]
[2025-02-10 15:50:22,369][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:22,436][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:22,436][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:22,437][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:22,438][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:22,439][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:22,438][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:24,978][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:28,731][flwr][INFO] - fit progress: (15, 0.17367205834388733, {'accuracy': 0.5783}, 150.8414111789898)
[2025-02-10 15:50:28,731][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:28,840][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:28,841][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:28,841][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:28,841][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:28,842][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:28,842][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:31,547][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:31,547][flwr][INFO] - 
[2025-02-10 15:50:31,547][flwr][INFO] - [ROUND 16]
[2025-02-10 15:50:31,547][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:31,654][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:31,654][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:31,655][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:31,655][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:31,656][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:31,656][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:34,358][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:38,443][flwr][INFO] - fit progress: (16, 0.22597995591163636, {'accuracy': 0.5611}, 160.5530764599971)
[2025-02-10 15:50:38,443][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:38,464][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:38,465][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:38,467][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:38,467][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:38,468][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:38,469][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:41,149][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:41,149][flwr][INFO] - 
[2025-02-10 15:50:41,150][flwr][INFO] - [ROUND 17]
[2025-02-10 15:50:41,150][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:41,171][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:41,172][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:41,172][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:41,173][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:41,173][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:41,174][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:43,658][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:47,330][flwr][INFO] - fit progress: (17, 0.29174233701229096, {'accuracy': 0.5488}, 169.4399099519942)
[2025-02-10 15:50:47,330][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:47,383][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:47,383][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:47,384][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:47,385][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:47,386][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:47,386][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:50,036][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:50,036][flwr][INFO] - 
[2025-02-10 15:50:50,036][flwr][INFO] - [ROUND 18]
[2025-02-10 15:50:50,036][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:50,089][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:50,089][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:50,090][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:50,090][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:50,091][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:50,091][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:52,544][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:50:56,879][flwr][INFO] - fit progress: (18, 0.3724333946704865, {'accuracy': 0.5359}, 178.9894772080006)
[2025-02-10 15:50:56,879][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:56,903][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:56,903][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:56,904][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:50:56,906][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:56,906][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:56,907][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:59,687][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:50:59,687][flwr][INFO] - 
[2025-02-10 15:50:59,687][flwr][INFO] - [ROUND 19]
[2025-02-10 15:50:59,687][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:50:59,710][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:59,710][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:50:59,710][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:50:59,711][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:50:59,712][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:50:59,713][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:51:02,195][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:51:05,839][flwr][INFO] - fit progress: (19, 0.47182252397537233, {'accuracy': 0.5233}, 187.9495631519967)
[2025-02-10 15:51:05,839][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:51:05,924][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:05,925][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:05,925][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:51:05,926][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:51:05,925][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:51:05,927][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:51:08,247][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:51:08,248][flwr][INFO] - 
[2025-02-10 15:51:08,248][flwr][INFO] - [ROUND 20]
[2025-02-10 15:51:08,248][flwr][INFO] - configure_fit: strategy sampled 10 clients (out of 10)
[2025-02-10 15:51:08,328][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:08,328][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:08,328][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:51:08,328][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:51:08,330][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:51:08,330][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:51:11,058][flwr][INFO] - aggregate_fit: received 8 results and 2 failures
[2025-02-10 15:51:14,735][flwr][INFO] - fit progress: (20, 0.5938236517906189, {'accuracy': 0.5108}, 196.84528893399693)
[2025-02-10 15:51:14,735][flwr][INFO] - configure_evaluate: strategy sampled 10 clients (out of 10)
[2025-02-10 15:51:14,837][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:14,838][flwr][ERROR] - Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
[2025-02-10 15:51:14,840][flwr][ERROR] - An exception was raised when processing a message by RayBackend
[2025-02-10 15:51:14,841][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.27.85.201, ID: fa0e778cdbb72d99e3af6d1c9714712f044051449c8aad952e7518d8) where the task (actor ID: 0ea12ccfc3e214e3c7e07b0101000000, name=ClientAppActor.__init__, pid=1093, memory used=0.57GB) was running was 7.30GB / 7.45GB (0.979965), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.27.85.201`. To see the logs of the worker, use `ray logs worker-7bd9f05c42c72fe7bbfdfef93cc70b8b5be9c4e21c4f68326181c085*out -ip 172.27.85.201. Top 10 memory users:
PID	MEM(GB)	COMMAND
1092	0.57	ray::ClientAppActor.run
1093	0.57	ray::ClientAppActor.run
1094	0.57	ray::ClientAppActor.run
1090	0.57	ray::ClientAppActor.run
1091	0.53	ray::ClientAppActor.run
1089	0.53	ray::ClientAppActor.run
1088	0.52	ray::ClientAppActor.run
1087	0.50	ray::ClientAppActor.run
1085	0.50	ray::ClientAppActor.run
378	0.24	/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/core/src/ray/raylet/ra...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.

[2025-02-10 15:51:14,841][flwr][ERROR] - The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[2025-02-10 15:51:14,842][flwr][ERROR] - Traceback (most recent call last):
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/vce_api.py", line 112, in worker
    out_mssg, updated_context = backend.process_message(message, context)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 187, in process_message
    raise ex
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/server/superlink/fleet/vce/backend/raybackend.py", line 175, in process_message
    ) = self.pool.fetch_result_and_return_actor_to_pool(future)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/flwr/simulation/ray_transport/ray_actor.py", line 478, in fetch_result_and_return_actor_to_pool
    _, out_mssg, updated_context = ray.get(future)
                                   ^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/auto_init_hook.py", line 21, in auto_init_wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/client_mode_hook.py", line 103, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 2667, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/theo_ubuntu/miniconda3/envs/flwr_25_DP/lib/python3.11/site-packages/ray/_private/worker.py", line 866, in get_objects
    raise value
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
	class_name: ClientAppActor
	actor_id: 0c5cfb1c72e4c60628d2619e01000000
	pid: 1095
	namespace: 648abc8c-7058-4fcb-8dca-088a9fc204b8
	ip: 172.27.85.201
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.

[2025-02-10 15:51:17,141][flwr][INFO] - aggregate_evaluate: received 8 results and 2 failures
[2025-02-10 15:51:17,141][flwr][INFO] - 
[2025-02-10 15:51:17,141][flwr][INFO] - [SUMMARY]
[2025-02-10 15:51:17,141][flwr][INFO] - Run finished 20 round(s) in 199.25s
[2025-02-10 15:51:17,147][flwr][INFO] - 	History (loss, distributed):
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 1: 0.07603480493028959
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 2: 0.07488853037357332
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 3: 0.07130684206883113
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 4: 0.06517081533869108
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 5: 0.05564976036548614
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 6: 0.047697925070921576
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 7: 0.04355274674793084
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 8: 0.042816919398804505
[2025-02-10 15:51:17,147][flwr][INFO] - 		round 9: 0.046092427925517154
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 10: 0.05266850749030709
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 11: 0.06398260872811079
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 12: 0.08156746122986079
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 13: 0.10598792117089033
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 14: 0.13962958008050919
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 15: 0.18322347452243168
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 16: 0.23923757374286655
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 17: 0.3097411525746187
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 18: 0.3968510498603185
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 19: 0.5041345114509265
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 20: 0.6365705450375875
[2025-02-10 15:51:17,148][flwr][INFO] - 	History (loss, centralized):
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 0: 0.07204539165496826
[2025-02-10 15:51:17,148][flwr][INFO] - 		round 1: 0.07140904502868653
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 2: 0.07013665909767151
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 3: 0.06684601922035217
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 4: 0.060550751078128816
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 5: 0.05163719133138656
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 6: 0.044057470160722735
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 7: 0.04037206601500511
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 8: 0.04021452856063843
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 9: 0.04352908374071121
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 10: 0.049734366273880004
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 11: 0.06092203503847122
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 12: 0.0775224134027958
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 13: 0.10108983575105668
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 14: 0.13253731207847594
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 15: 0.17367205834388733
[2025-02-10 15:51:17,149][flwr][INFO] - 		round 16: 0.22597995591163636
[2025-02-10 15:51:17,150][flwr][INFO] - 		round 17: 0.29174233701229096
[2025-02-10 15:51:17,150][flwr][INFO] - 		round 18: 0.3724333946704865
[2025-02-10 15:51:17,150][flwr][INFO] - 		round 19: 0.47182252397537233
[2025-02-10 15:51:17,150][flwr][INFO] - 		round 20: 0.5938236517906189
[2025-02-10 15:51:17,150][flwr][INFO] - 	History (metrics, distributed, fit):
[2025-02-10 15:51:17,150][flwr][INFO] - 	{'clients_epsilons': [(1, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (2, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (3, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (4, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (5, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (6, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (7, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (8, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (9, 0.6813471387867437),
[2025-02-10 15:51:17,150][flwr][INFO] - 	                      (10, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (11, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (12, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (13, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (14, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (15, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (16, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (17, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (18, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (19, 0.6813471387867437),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                      (20, 0.6813471387867437)],
[2025-02-10 15:51:17,151][flwr][INFO] - 	 'clients_losses': [(1, 2.2942123115062714),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                    (2, 2.2692282617092134),
[2025-02-10 15:51:17,151][flwr][INFO] - 	                    (3, 2.2087313214937847),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (4, 2.0722871174414954),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (5, 1.8409812241792678),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (6, 1.5697078357140224),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (7, 1.380304205417633),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (8, 1.2930894886453947),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (9, 1.328782891233762),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (10, 1.4613941803574562),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (11, 1.7111129611730576),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (12, 2.128851447502772),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (13, 2.7547977675994235),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (14, 3.6202976276477177),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (15, 4.763662029306094),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (16, 6.206953386465709),
[2025-02-10 15:51:17,152][flwr][INFO] - 	                    (17, 8.002424442768097),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                    (18, 10.22534701625506),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                    (19, 12.940380297104518),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                    (20, 16.27101710240046)]}
[2025-02-10 15:51:17,153][flwr][INFO] - 	History (metrics, distributed, evaluate):
[2025-02-10 15:51:17,153][flwr][INFO] - 	{'clients_accuracies': [(1, 0.2458333333333333),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (2, 0.2916666666666667),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (3, 0.38020833333333337),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (4, 0.403125),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (5, 0.4760416666666667),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (6, 0.5041666666666667),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (7, 0.5375),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (8, 0.5718749999999999),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (9, 0.5791666666666667),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (10, 0.6072916666666667),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (11, 0.6145833333333334),
[2025-02-10 15:51:17,153][flwr][INFO] - 	                        (12, 0.615625),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (13, 0.6031250000000001),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (14, 0.5916666666666668),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (15, 0.5666666666666667),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (16, 0.5489583333333333),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (17, 0.5322916666666666),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (18, 0.5239583333333333),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (19, 0.5166666666666667),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                        (20, 0.5)],
[2025-02-10 15:51:17,154][flwr][INFO] - 	 'clients_losses': [(1, 0.07603480493028959),
[2025-02-10 15:51:17,154][flwr][INFO] - 	                    (2, 0.07488853037357332),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (3, 0.07130684206883113),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (4, 0.06517081533869108),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (5, 0.05564976036548614),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (6, 0.047697925070921576),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (7, 0.04355274674793084),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (8, 0.042816919398804505),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (9, 0.046092427925517154),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (10, 0.05266850749030709),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (11, 0.06398260872811079),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (12, 0.08156746122986079),
[2025-02-10 15:51:17,155][flwr][INFO] - 	                    (13, 0.10598792117089033),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (14, 0.13962958008050919),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (15, 0.18322347452243168),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (16, 0.23923757374286655),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (17, 0.3097411525746187),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (18, 0.3968510498603185),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (19, 0.5041345114509265),
[2025-02-10 15:51:17,156][flwr][INFO] - 	                    (20, 0.6365705450375875)]}
[2025-02-10 15:51:17,156][flwr][INFO] - 	History (metrics, centralized):
[2025-02-10 15:51:17,156][flwr][INFO] - 	{'accuracy': [(0, 0.1096),
[2025-02-10 15:51:17,156][flwr][INFO] - 	              (1, 0.2405),
[2025-02-10 15:51:17,156][flwr][INFO] - 	              (2, 0.2935),
[2025-02-10 15:51:17,156][flwr][INFO] - 	              (3, 0.3797),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (4, 0.4249),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (5, 0.4755),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (6, 0.5184),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (7, 0.5508),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (8, 0.5821),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (9, 0.6012),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (10, 0.6165),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (11, 0.6202),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (12, 0.6164),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (13, 0.605),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (14, 0.5916),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (15, 0.5783),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (16, 0.5611),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (17, 0.5488),
[2025-02-10 15:51:17,157][flwr][INFO] - 	              (18, 0.5359),
[2025-02-10 15:51:17,158][flwr][INFO] - 	              (19, 0.5233),
[2025-02-10 15:51:17,158][flwr][INFO] - 	              (20, 0.5108)]}
[2025-02-10 15:51:17,158][flwr][INFO] - 
